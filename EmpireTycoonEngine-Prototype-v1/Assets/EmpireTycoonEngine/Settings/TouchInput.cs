//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/EmpireTycoonEngine/Settings/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""TouchScreenGamePlay"",
            ""id"": ""78657e32-cd42-4576-a9ec-c3c975503740"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1fc44d7d-d4ed-4a85-b949-9b94606c3a24"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a0a259cf-a00b-4d04-bb07-61662576163c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""1c2fe767-195e-48aa-b08c-895128a9226e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryFingerTap"",
                    ""type"": ""Button"",
                    ""id"": ""331d9053-8103-411f-9267-c02a94e27d32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f8906a0-cfb0-4395-a8d6-43adcf25b5b1"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScheme"",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b21bc3cc-9d4c-4780-ac71-02bc42789077"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScheme"",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""263ed6e0-75ca-4bab-aa7d-86f08b748d81"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScheme"",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5a90c95-ec54-46d5-8adb-8f77fc9cb279"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScheme"",
                    ""action"": ""PrimaryFingerTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MobileTouchScheme"",
            ""bindingGroup"": ""MobileTouchScheme"",
            ""devices"": []
        }
    ]
}");
        // TouchScreenGamePlay
        m_TouchScreenGamePlay = asset.FindActionMap("TouchScreenGamePlay", throwIfNotFound: true);
        m_TouchScreenGamePlay_PrimaryFingerPosition = m_TouchScreenGamePlay.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
        m_TouchScreenGamePlay_SecondaryFingerPosition = m_TouchScreenGamePlay.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
        m_TouchScreenGamePlay_SecondaryTouchContact = m_TouchScreenGamePlay.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        m_TouchScreenGamePlay_PrimaryFingerTap = m_TouchScreenGamePlay.FindAction("PrimaryFingerTap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchScreenGamePlay
    private readonly InputActionMap m_TouchScreenGamePlay;
    private List<ITouchScreenGamePlayActions> m_TouchScreenGamePlayActionsCallbackInterfaces = new List<ITouchScreenGamePlayActions>();
    private readonly InputAction m_TouchScreenGamePlay_PrimaryFingerPosition;
    private readonly InputAction m_TouchScreenGamePlay_SecondaryFingerPosition;
    private readonly InputAction m_TouchScreenGamePlay_SecondaryTouchContact;
    private readonly InputAction m_TouchScreenGamePlay_PrimaryFingerTap;
    public struct TouchScreenGamePlayActions
    {
        private @TouchInput m_Wrapper;
        public TouchScreenGamePlayActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerPosition => m_Wrapper.m_TouchScreenGamePlay_PrimaryFingerPosition;
        public InputAction @SecondaryFingerPosition => m_Wrapper.m_TouchScreenGamePlay_SecondaryFingerPosition;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_TouchScreenGamePlay_SecondaryTouchContact;
        public InputAction @PrimaryFingerTap => m_Wrapper.m_TouchScreenGamePlay_PrimaryFingerTap;
        public InputActionMap Get() { return m_Wrapper.m_TouchScreenGamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchScreenGamePlayActions set) { return set.Get(); }
        public void AddCallbacks(ITouchScreenGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchScreenGamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchScreenGamePlayActionsCallbackInterfaces.Add(instance);
            @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
            @PrimaryFingerTap.started += instance.OnPrimaryFingerTap;
            @PrimaryFingerTap.performed += instance.OnPrimaryFingerTap;
            @PrimaryFingerTap.canceled += instance.OnPrimaryFingerTap;
        }

        private void UnregisterCallbacks(ITouchScreenGamePlayActions instance)
        {
            @PrimaryFingerPosition.started -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled -= instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled -= instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled -= instance.OnSecondaryTouchContact;
            @PrimaryFingerTap.started -= instance.OnPrimaryFingerTap;
            @PrimaryFingerTap.performed -= instance.OnPrimaryFingerTap;
            @PrimaryFingerTap.canceled -= instance.OnPrimaryFingerTap;
        }

        public void RemoveCallbacks(ITouchScreenGamePlayActions instance)
        {
            if (m_Wrapper.m_TouchScreenGamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchScreenGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchScreenGamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchScreenGamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchScreenGamePlayActions @TouchScreenGamePlay => new TouchScreenGamePlayActions(this);
    private int m_MobileTouchSchemeSchemeIndex = -1;
    public InputControlScheme MobileTouchSchemeScheme
    {
        get
        {
            if (m_MobileTouchSchemeSchemeIndex == -1) m_MobileTouchSchemeSchemeIndex = asset.FindControlSchemeIndex("MobileTouchScheme");
            return asset.controlSchemes[m_MobileTouchSchemeSchemeIndex];
        }
    }
    public interface ITouchScreenGamePlayActions
    {
        void OnPrimaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
        void OnPrimaryFingerTap(InputAction.CallbackContext context);
    }
}
